#pragma once

//GLFW Defines and includes
#ifndef GLFW_INCLUDE_VULKAN
#define GLFW_INCLUDE_VULKAN
#endif
#include <GLFW/glfw3.h>


//The persepective proj matrix generated by GLM will use the OpenGL depth range of -1.0 to 1.0 by default.
//We need to configure it to use the Vulkan range of 0.0 to 1.0 using the GLM_FROCE_DEPTH_ZERO_TO_ONE defintion.
#ifndef GLM_FORCE_DEPTH_ZERO_TO_ONE
#define GLM_FORCE_DEPTH_ZERO_TO_ONE
#endif
#include <glm/glm.hpp>

//The hash functions are defined in the gtx folder, which means that it is techniacally still an experimental
//extension to GLM. Therefore you need to define GLM_ENABLE_EXPPERTIMENTAL to use it. It means that the API could
//change with a new version of GLM in the future, but in practive the API is very stable
#ifndef GLM_ENABLE_EXPERIMENTAL
#define GLM_ENABLE_EXPERIMENTAL
#endif
#include <glm/gtx/hash.hpp>

//Exposes functions that can be used to generate model transformations like glm::rotate, 
//view transformations like glm::lookat
//proj transformation like glm::perspective.
#include <glm/gtc/matrix_transform.hpp>

#include <array>

struct Vertex
{
	glm::vec3 Position;
	glm::vec3 Color;
	glm::vec2 TexCoord;

	static VkVertexInputBindingDescription GetBindingDescription();
	static std::array<VkVertexInputAttributeDescription, 3> GetAttributeDescriptions();

	bool operator==(const Vertex& other) const;
};
